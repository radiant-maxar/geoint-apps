diff --git a/configure.ac b/configure.ac
index 7d173c2..2bf2471 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,9 +1,14 @@
 #                                               -*- Autoconf -*-
 # Process this file with autoconf to produce a configure script.
 
+# Define mod_tile version number
+m4_define([mod_tile_version], [0.6.1])
+
 AC_PREREQ([2.61])
 AX_CONFIG_NICE
-AC_INIT(mod_tile, 0.1, http://trac.openstreetmap.org)
+AC_INIT([mod_tile],
+        [mod_tile_version],
+        [http://trac.openstreetmap.org])
 AM_INIT_AUTOMAKE([subdir-objects])
 LT_INIT
 AC_CONFIG_SRCDIR([src/convert_meta.c])
diff --git a/includes/daemon.h b/includes/daemon.h
index c337e9c..7af534e 100644
--- a/includes/daemon.h
+++ b/includes/daemon.h
@@ -34,15 +34,16 @@ int daemon(int nochdir, int noclose);
 #define MAX_SLAVES 5
 
 typedef struct {
-	char *socketname;
-	char *iphostname;
+	const char *iphostname;
+	const char *mapnik_font_dir;
+	const char *mapnik_plugins_dir;
+	const char *pid_filename;
+	const char *socketname;
+	const char *stats_filename;
+	const char *tile_dir;
 	int ipport;
-	int num_threads;
-	char *tile_dir;
-	char *mapnik_plugins_dir;
-	char *mapnik_font_dir;
 	int mapnik_font_dir_recurse;
-	char * stats_filename;
+	int num_threads;
 } renderd_config;
 
 typedef struct {
diff --git a/includes/protocol.h b/includes/protocol.h
index 1444a80..a528d3b 100644
--- a/includes/protocol.h
+++ b/includes/protocol.h
@@ -35,6 +35,8 @@ extern "C" {
 #define TILE_PATH_MAX (256)
 #define PROTO_VER (3)
 #define RENDER_SOCKET "/run/renderd/renderd.sock"
+#define RENDER_HOST "localhost"
+#define RENDER_PORT 7654
 #define XMLCONFIG_MAX 41
 
 enum protoCmd { cmdIgnore, cmdRender, cmdDirty, cmdDone, cmdNotDone, cmdRenderPrio, cmdRenderBulk, cmdRenderLow };
diff --git a/includes/render_config.h b/includes/render_config.h
index 7582263..39a08cb 100644
--- a/includes/render_config.h
+++ b/includes/render_config.h
@@ -50,6 +50,8 @@
 #define XMLCONFIG_DEFAULT "default"
 // Maximum number of configurations that mod tile will allow
 #define XMLCONFIGS_MAX 10
+// Default PID file path
+#define PIDFILE "/run/renderd/renderd.pid"
 
 // Mapnik input plugins (will need to adjust for 32 bit libs)
 #define MAPNIK_PLUGINS "/usr/local/lib64/mapnik/input"
diff --git a/src/cache_expire.c b/src/cache_expire.c
index 057adea..206da43 100644
--- a/src/cache_expire.c
+++ b/src/cache_expire.c
@@ -115,7 +115,7 @@ void cache_expire(int sock, char * host, char * uri, int x, int y, int z)
 	}
 
 	char * url = (char *)malloc(1024);
-	sprintf(url, "http://%s%s%i/%i/%i.png", host, uri, z, x, y);
+	snprintf(url, 1024, "http://%s%s%i/%i/%i.png", host, uri, z, x, y);
 	cache_expire_url(sock, url);
 	free(url);
 }
diff --git a/src/daemon.c b/src/daemon.c
index 8858f3f..e7c7cdb 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -34,6 +34,7 @@
 #include <strings.h>
 #include <getopt.h>
 
+#include "config.h"
 #include "render_config.h"
 #include "daemon.h"
 #include "gen_tile.h"
@@ -43,11 +44,13 @@
 #include "g_logger.h"
 
 // extern "C" {
+#ifdef __FreeBSD__
+#include <iniparser.h>
+#else
 #include <iniparser/iniparser.h>
+#endif
 // }
 
-#define PIDFILE "/run/renderd/renderd.pid"
-
 #define PFD_LISTEN        0
 #define PFD_EXIT_PIPE     1
 #define PFD_SPECIAL_COUNT 2
@@ -739,14 +742,16 @@ int main(int argc, char **argv)
 	while (1) {
 		int option_index = 0;
 		static struct option long_options[] = {
-			{"config", required_argument, 0, 'c'},
-			{"foreground", no_argument, 0, 'f'},
-			{"slave", required_argument, 0, 's'},
-			{"help", no_argument, 0, 'h'},
+			{"config",     required_argument, 0, 'c'},
+			{"foreground", no_argument,       0, 'f'},
+			{"slave",      required_argument, 0, 's'},
+
+			{"help",       no_argument,       0, 'h'},
+			{"version",    no_argument,       0, 'V'},
 			{0, 0, 0, 0}
 		};
 
-		c = getopt_long(argc, argv, "hfc:", long_options, &option_index);
+		c = getopt_long(argc, argv, "c:fs:hV", long_options, &option_index);
 
 		if (c == -1) {
 			break;
@@ -773,10 +778,16 @@ int main(int argc, char **argv)
 			case 'h':
 				fprintf(stderr, "Usage: renderd [OPTION] ...\n");
 				fprintf(stderr, "Mapnik rendering daemon\n");
-				fprintf(stderr, "  -f, --foreground      run in foreground\n");
-				fprintf(stderr, "  -h, --help            display this help and exit\n");
 				fprintf(stderr, "  -c, --config=CONFIG   set location of config file (default %s)\n", RENDERD_CONFIG);
+				fprintf(stderr, "  -f, --foreground      run in foreground\n");
 				fprintf(stderr, "  -s, --slave=CONFIG_NR set which render slave this is (default 0)\n");
+				fprintf(stderr, "\n");
+				fprintf(stderr, "  -h, --help            display this help and exit\n");
+				fprintf(stderr, "  -V, --version         display the version number and exit\n");
+				exit(0);
+
+			case 'V':
+				fprintf(stdout, "%s\n", VERSION);
 				exit(0);
 
 			default:
@@ -790,7 +801,7 @@ int main(int argc, char **argv)
 		exit(1);
 	}
 
-	g_logger(G_LOG_LEVEL_INFO, "Rendering daemon started");
+	g_logger(G_LOG_LEVEL_INFO, "Rendering daemon started (version %s)", VERSION);
 
 	render_request_queue = request_queue_init();
 
@@ -820,7 +831,7 @@ int main(int argc, char **argv)
 	char buffer[PATH_MAX];
 
 	for (int section = 0; section < iniparser_getnsec(ini); section++) {
-		char *name = iniparser_getsecname(ini, section);
+		const char *name = iniparser_getsecname(ini, section);
 		g_logger(G_LOG_LEVEL_INFO, "Parsing section %s", name);
 
 		if (strncmp(name, "renderd", 7) && strcmp(name, "mapnik")) {
@@ -844,8 +855,8 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].xmlname, name);
 
-			sprintf(buffer, "%s:uri", name);
-			char *ini_uri = iniparser_getstring(ini, buffer, (char *)"");
+			snprintf(buffer, sizeof(buffer), "%s:uri", name);
+			const char *ini_uri = iniparser_getstring(ini, buffer, (char *)"");
 
 			if (strlen(ini_uri) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "URI too long: %s", ini_uri);
@@ -854,8 +865,8 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].xmluri, ini_uri);
 
-			sprintf(buffer, "%s:xml", name);
-			char *ini_xmlpath = iniparser_getstring(ini, buffer, (char *)"");
+			snprintf(buffer, sizeof(buffer), "%s:xml", name);
+			const char *ini_xmlpath = iniparser_getstring(ini, buffer, (char *)"");
 
 			if (strlen(ini_xmlpath) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "XML path too long: %s", ini_xmlpath);
@@ -864,8 +875,8 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].xmlfile, ini_xmlpath);
 
-			sprintf(buffer, "%s:host", name);
-			char *ini_hostname = iniparser_getstring(ini, buffer, (char *) "");
+			snprintf(buffer, sizeof(buffer), "%s:host", name);
+			const char *ini_hostname = iniparser_getstring(ini, buffer, (char *) "");
 
 			if (strlen(ini_hostname) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "Host name too long: %s", ini_hostname);
@@ -874,8 +885,8 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].host, ini_hostname);
 
-			sprintf(buffer, "%s:htcphost", name);
-			char *ini_htcpip = iniparser_getstring(ini, buffer, (char *) "");
+			snprintf(buffer, sizeof(buffer), "%s:htcphost", name);
+			const char *ini_htcpip = iniparser_getstring(ini, buffer, (char *) "");
 
 			if (strlen(ini_htcpip) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "HTCP host name too long: %s", ini_htcpip);
@@ -884,8 +895,8 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].htcpip, ini_htcpip);
 
-			sprintf(buffer, "%s:tilesize", name);
-			char *ini_tilesize = iniparser_getstring(ini, buffer, (char *) "256");
+			snprintf(buffer, sizeof(buffer), "%s:tilesize", name);
+			const char *ini_tilesize = iniparser_getstring(ini, buffer, (char *) "256");
 			maps[iconf].tile_px_size = atoi(ini_tilesize);
 
 			if (maps[iconf].tile_px_size < 1) {
@@ -893,8 +904,8 @@ int main(int argc, char **argv)
 				exit(7);
 			}
 
-			sprintf(buffer, "%s:scale", name);
-			char *ini_scale = iniparser_getstring(ini, buffer, (char *) "1.0");
+			snprintf(buffer, sizeof(buffer), "%s:scale", name);
+			const char *ini_scale = iniparser_getstring(ini, buffer, (char *) "1.0");
 			maps[iconf].scale_factor = atof(ini_scale);
 
 			if (maps[iconf].scale_factor < 0.1 || maps[iconf].scale_factor > 8.0) {
@@ -902,8 +913,8 @@ int main(int argc, char **argv)
 				exit(7);
 			}
 
-			sprintf(buffer, "%s:tiledir", name);
-			char *ini_tiledir = iniparser_getstring(ini, buffer, (char *) config.tile_dir);
+			snprintf(buffer, sizeof(buffer), "%s:tiledir", name);
+			const char *ini_tiledir = iniparser_getstring(ini, buffer, (char *) config.tile_dir);
 
 			if (strlen(ini_tiledir) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "Tiledir too long: %s", ini_tiledir);
@@ -912,21 +923,21 @@ int main(int argc, char **argv)
 
 			strcpy(maps[iconf].tile_dir, ini_tiledir);
 
-			sprintf(buffer, "%s:maxzoom", name);
-			char *ini_maxzoom = iniparser_getstring(ini, buffer, "18");
+			snprintf(buffer, sizeof(buffer), "%s:maxzoom", name);
+			const char *ini_maxzoom = iniparser_getstring(ini, buffer, "18");
 			maps[iconf].max_zoom = atoi(ini_maxzoom);
 
 			if (maps[iconf].max_zoom > MAX_ZOOM) {
-				g_logger(G_LOG_LEVEL_CRITICAL, "Specified max zoom (%i) is to large. Renderd currently only supports up to zoom level %i", maps[iconf].max_zoom, MAX_ZOOM);
+				g_logger(G_LOG_LEVEL_CRITICAL, "Specified max zoom (%i) is too large. Renderd currently only supports up to zoom level %i", maps[iconf].max_zoom, MAX_ZOOM);
 				exit(7);
 			}
 
-			sprintf(buffer, "%s:minzoom", name);
-			char *ini_minzoom = iniparser_getstring(ini, buffer, "0");
+			snprintf(buffer, sizeof(buffer), "%s:minzoom", name);
+			const char *ini_minzoom = iniparser_getstring(ini, buffer, "0");
 			maps[iconf].min_zoom = atoi(ini_minzoom);
 
 			if (maps[iconf].min_zoom < 0) {
-				g_logger(G_LOG_LEVEL_CRITICAL, "Specified min zoom (%i) is to small. Minimum zoom level has to be greater or equal to 0", maps[iconf].min_zoom);
+				g_logger(G_LOG_LEVEL_CRITICAL, "Specified min zoom (%i) is too small. Minimum zoom level has to be greater or equal to 0", maps[iconf].min_zoom);
 				exit(7);
 			}
 
@@ -935,8 +946,8 @@ int main(int argc, char **argv)
 				exit(7);
 			}
 
-			sprintf(buffer, "%s:parameterize_style", name);
-			char *ini_parameterize = iniparser_getstring(ini, buffer, "");
+			snprintf(buffer, sizeof(buffer), "%s:parameterize_style", name);
+			const char *ini_parameterize = iniparser_getstring(ini, buffer, "");
 
 			if (strlen(ini_parameterize) >= (PATH_MAX - 1)) {
 				g_logger(G_LOG_LEVEL_CRITICAL, "Parameterize_style too long: %s", ini_parameterize);
@@ -965,23 +976,26 @@ int main(int argc, char **argv)
 				exit(7);
 			}
 
-			sprintf(buffer, "%s:socketname", name);
+			snprintf(buffer, sizeof(buffer), "%s:socketname", name);
 			config_slaves[render_sec].socketname = iniparser_getstring(ini,
 							       buffer, (char *) RENDER_SOCKET);
-			sprintf(buffer, "%s:iphostname", name);
+			snprintf(buffer, sizeof(buffer), "%s:iphostname", name);
 			config_slaves[render_sec].iphostname = iniparser_getstring(ini,
 							       buffer, "");
-			sprintf(buffer, "%s:ipport", name);
+			snprintf(buffer, sizeof(buffer), "%s:ipport", name);
 			config_slaves[render_sec].ipport = iniparser_getint(ini, buffer, 0);
-			sprintf(buffer, "%s:num_threads", name);
+			snprintf(buffer, sizeof(buffer), "%s:num_threads", name);
 			config_slaves[render_sec].num_threads = iniparser_getint(ini,
 								buffer, NUM_THREADS);
-			sprintf(buffer, "%s:tile_dir", name);
+			snprintf(buffer, sizeof(buffer), "%s:tile_dir", name);
 			config_slaves[render_sec].tile_dir = iniparser_getstring(ini,
 							     buffer, (char *) HASH_PATH);
-			sprintf(buffer, "%s:stats_file", name);
+			snprintf(buffer, sizeof(buffer), "%s:stats_file", name);
 			config_slaves[render_sec].stats_filename = iniparser_getstring(ini,
 					buffer, NULL);
+			snprintf(buffer, sizeof(buffer), "%s:pid_file", name);
+			config_slaves[render_sec].pid_filename = iniparser_getstring(ini,
+					buffer, (char *) PIDFILE);
 
 			if (render_sec == active_slave) {
 				config.socketname = config_slaves[render_sec].socketname;
@@ -991,6 +1005,8 @@ int main(int argc, char **argv)
 				config.tile_dir = config_slaves[render_sec].tile_dir;
 				config.stats_filename
 					= config_slaves[render_sec].stats_filename;
+				config.pid_filename
+					= config_slaves[render_sec].pid_filename;
 				config.mapnik_plugins_dir = iniparser_getstring(ini,
 							    "mapnik:plugins_dir", (char *) MAPNIK_PLUGINS);
 				config.mapnik_font_dir = iniparser_getstring(ini,
@@ -1017,6 +1033,7 @@ int main(int argc, char **argv)
 
 	g_logger(G_LOG_LEVEL_INFO, "config renderd: tile_dir=%s", config.tile_dir);
 	g_logger(G_LOG_LEVEL_INFO, "config renderd: stats_file=%s", config.stats_filename);
+	g_logger(G_LOG_LEVEL_INFO, "config renderd: pid_file=%s", config.pid_filename);
 	g_logger(G_LOG_LEVEL_INFO, "config mapnik:  plugins_dir=%s", config.mapnik_plugins_dir);
 	g_logger(G_LOG_LEVEL_INFO, "config mapnik:  font_dir=%s", config.mapnik_font_dir);
 	g_logger(G_LOG_LEVEL_INFO, "config mapnik:  font_dir_recurse=%d", config.mapnik_font_dir_recurse);
@@ -1044,6 +1061,8 @@ int main(int argc, char **argv)
 			 config_slaves[i].tile_dir);
 		g_logger(G_LOG_LEVEL_INFO, "config renderd(%i): stats_file=%s", i,
 			 config_slaves[i].stats_filename);
+		g_logger(G_LOG_LEVEL_INFO, "config renderd(%i): pid_file=%s", i,
+			 config_slaves[i].pid_filename);
 	}
 
 	for (iconf = 0; iconf < XMLCONFIGS_MAX; ++iconf) {
@@ -1085,7 +1104,7 @@ int main(int argc, char **argv)
 		}
 
 		/* write pid file */
-		FILE *pidfile = fopen(PIDFILE, "w");
+		FILE *pidfile = fopen(config.pid_filename, "w");
 
 		if (pidfile) {
 			(void) fprintf(pidfile, "%d\n", getpid());
diff --git a/src/gen_tile_test.cpp b/src/gen_tile_test.cpp
index 063a651..c5d4dfe 100644
--- a/src/gen_tile_test.cpp
+++ b/src/gen_tile_test.cpp
@@ -40,6 +40,10 @@
 #include <mach/clock.h>
 #include <mach/mach.h>
 #endif
+#ifdef __FreeBSD__
+#include <pthread.h>
+#include <sys/wait.h>
+#endif
 
 #include <mapnik/version.hpp>
 #if MAPNIK_VERSION < 200000
@@ -103,6 +107,8 @@ void * addition_thread(void * arg)
 	uint64_t threadid;
 #ifdef __MACH__ // Mac OS X does not support SYS_gettid
 	pthread_threadid_np(NULL, &threadid);
+#elif __FreeBSD__ // FreeBSD does not support SYS_getid either
+	threadid = (uint64_t) pthread_self();
 #else
 	threadid = syscall(SYS_gettid);
 #endif
diff --git a/src/mod_tile.c b/src/mod_tile.c
index 9273a9c..b7a5940 100644
--- a/src/mod_tile.c
+++ b/src/mod_tile.c
@@ -83,6 +83,10 @@ APLOG_USE_MODULE(tile);
 #define APACHE24 1
 #endif
 
+#if defined(__FreeBSD__) && !defined(s6_addr32)
+#define s6_addr32 __u6_addr.__u6_addr32
+#endif
+
 apr_shm_t *stats_shm;
 apr_shm_t *delaypool_shm;
 char *shmfilename;
@@ -321,7 +325,7 @@ static int request_tile(request_rec *r, struct protocol *cmd, int renderImmediat
 
 				if (ret != sizeof(struct protocol_v2)) {
 					ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r, "request_tile: Failed to read response from rendering socket. Got %d bytes but expected %d. Errno %d (%s)",
-						      ret, sizeof(struct protocol_v2), errno, strerror(errno));
+						      ret, (int) sizeof(struct protocol_v2), errno, strerror(errno));
 					break;
 				}
 
diff --git a/src/parameterize_style.cpp b/src/parameterize_style.cpp
index b0976fa..be17b52 100644
--- a/src/parameterize_style.cpp
+++ b/src/parameterize_style.cpp
@@ -40,6 +40,7 @@ static void parameterize_map_language(mapnik::Map &m, char * parameter)
 	tok = strtok(data, ",");
 
 	if (!tok) {
+		free(data);
 		return;        //No parameterization given
 	}
 
@@ -92,11 +93,11 @@ static void parameterize_map_language(mapnik::Map &m, char * parameter)
 
 parameterize_function_ptr init_parameterization_function(char * function_name)
 {
-	g_logger(G_LOG_LEVEL_INFO, "Loading parameterization function for %s", function_name);
-
 	if (strcmp(function_name, "") == 0) {
+		g_logger(G_LOG_LEVEL_DEBUG, "Parameterize_style not specified (or empty string specified)");
 		return NULL;
 	} else if (strcmp(function_name, "language") == 0) {
+		g_logger(G_LOG_LEVEL_INFO, "Loading parameterization function for %s", function_name);
 		return parameterize_map_language;
 	} else {
 		g_logger(G_LOG_LEVEL_WARNING, "unknown parameterization function for %s", function_name);
diff --git a/src/render_expired.c b/src/render_expired.c
index a606229..83f6b89 100644
--- a/src/render_expired.c
+++ b/src/render_expired.c
@@ -34,6 +34,7 @@
 #include <pthread.h>
 
 #include "protocol.h"
+#include "config.h"
 #include "render_config.h"
 #include "store.h"
 #include "render_submit_queue.h"
@@ -124,21 +125,23 @@ int main(int argc, char **argv)
 	while (1) {
 		int option_index = 0;
 		static struct option long_options[] = {
-			{"min-zoom", required_argument, 0, 'z'},
-			{"max-zoom", required_argument, 0, 'Z'},
-			{"socket", required_argument, 0, 's'},
-			{"num-threads", required_argument, 0, 'n'},
 			{"delete-from", required_argument, 0, 'd'},
-			{"touch-from", required_argument, 0, 'T'},
-			{"tile-dir", required_argument, 0, 't'},
-			{"max-load", required_argument, 0, 'l'},
-			{"map", required_argument, 0, 'm'},
-			{"verbose", no_argument, 0, 'v'},
-			{"help", no_argument, 0, 'h'},
+			{"map",         required_argument, 0, 'm'},
+			{"max-load",    required_argument, 0, 'l'},
+			{"max-zoom",    required_argument, 0, 'Z'},
+			{"min-zoom",    required_argument, 0, 'z'},
+			{"num-threads", required_argument, 0, 'n'},
+			{"socket",      required_argument, 0, 's'},
+			{"tile-dir",    required_argument, 0, 't'},
+			{"touch-from",  required_argument, 0, 'T'},
+			{"verbose",     no_argument,       0, 'v'},
+
+			{"help",        no_argument,       0, 'h'},
+			{"version",     no_argument,       0, 'V'},
 			{0, 0, 0, 0}
 		};
 
-		c = getopt_long(argc, argv, "hvz:Z:s:m:t:n:l:T:d:", long_options, &option_index);
+		c = getopt_long(argc, argv, "d:m:l:Z:z:n:s:t:T:vhV", long_options, &option_index);
 
 		if (c == -1) {
 			break;
@@ -217,14 +220,18 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_expired [OPTION] ...\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default is %d)\n", 18);
-				fprintf(stderr, "  -d, --delete-from=ZOOM  when expiring tiles of ZOOM or higher, delete them instead of re-rendering (default is off)\n");
-				fprintf(stderr, "  -T, --touch-from=ZOOM   when expiring tiles of ZOOM or higher, touch them instead of re-rendering (default is off)\n");
+				fprintf(stderr, "  -d, --delete-from=ZOOM            when expiring tiles of ZOOM or higher, delete them instead of re-rendering (default is off)\n");
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -T, --touch-from=ZOOM             when expiring tiles of ZOOM or higher, touch them instead of re-rendering (default is off)\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default is %d)\n", 18);
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
+				fprintf(stderr, "\n");
+				fprintf(stderr, "  -h, --help                        display this help and exit\n");
+				fprintf(stderr, "  -V, --version                     display the version number and exit\n");
+				fprintf(stderr, "\n");
 				fprintf(stderr, "Send a list of tiles to be rendered from STDIN in the format:\n");
 				fprintf(stderr, "  z/x/y\n");
 				fprintf(stderr, "e.g.\n");
@@ -235,6 +242,10 @@ int main(int argc, char **argv)
 				fprintf(stderr, "The above would cause all 4 tiles at zoom 1 to be rendered\n");
 				return -1;
 
+			case 'V':
+				fprintf(stdout, "%s\n", VERSION);
+				exit(0);
+
 			default:
 				fprintf(stderr, "unhandled char '%c'\n", c);
 				break;
diff --git a/src/render_list.c b/src/render_list.c
index cb75e7b..f2c83b2 100644
--- a/src/render_list.c
+++ b/src/render_list.c
@@ -36,6 +36,7 @@
 
 #include "gen_tile.h"
 #include "protocol.h"
+#include "config.h"
 #include "render_config.h"
 #include "store.h"
 #include "sys_utils.h"
@@ -95,25 +96,27 @@ int main(int argc, char **argv)
 	while (1) {
 		int option_index = 0;
 		static struct option long_options[] = {
-			{"min-zoom", required_argument, 0, 'z'},
-			{"max-zoom", required_argument, 0, 'Z'},
-			{"min-x", required_argument, 0, 'x'},
-			{"max-x", required_argument, 0, 'X'},
-			{"min-y", required_argument, 0, 'y'},
-			{"max-y", required_argument, 0, 'Y'},
-			{"socket", required_argument, 0, 's'},
+			{"all",         no_argument,       0, 'a'},
+			{"force",       no_argument,       0, 'f'},
+			{"map",         required_argument, 0, 'm'},
+			{"max-load",    required_argument, 0, 'l'},
+			{"max-x",       required_argument, 0, 'X'},
+			{"max-y",       required_argument, 0, 'Y'},
+			{"max-zoom",    required_argument, 0, 'Z'},
+			{"min-x",       required_argument, 0, 'x'},
+			{"min-y",       required_argument, 0, 'y'},
+			{"min-zoom",    required_argument, 0, 'z'},
 			{"num-threads", required_argument, 0, 'n'},
-			{"max-load", required_argument, 0, 'l'},
-			{"tile-dir", required_argument, 0, 't'},
-			{"map", required_argument, 0, 'm'},
-			{"verbose", no_argument, 0, 'v'},
-			{"force", no_argument, 0, 'f'},
-			{"all", no_argument, 0, 'a'},
-			{"help", no_argument, 0, 'h'},
+			{"socket",      required_argument, 0, 's'},
+			{"tile-dir",    required_argument, 0, 't'},
+			{"verbose",     no_argument,       0, 'v'},
+
+			{"help",        no_argument,       0, 'h'},
+			{"version",     no_argument,       0, 'V'},
 			{0, 0, 0, 0}
 		};
 
-		c = getopt_long(argc, argv, "hvaz:Z:x:X:y:Y:s:m:t:n:l:f", long_options, &option_index);
+		c = getopt_long(argc, argv, "afm:l:X:Y:Z:x:y:z:n:s:t:vhV", long_options, &option_index);
 
 		if (c == -1) {
 			break;
@@ -197,20 +200,25 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_list [OPTION] ...\n");
-				fprintf(stderr, "  -a, --all            render all tiles in given zoom level range instead of reading from STDIN\n");
-				fprintf(stderr, "  -f, --force          render tiles even if they seem current\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -l, --max-load=LOAD  sleep if load is this high (defaults to %d)\n", MAX_LOAD_OLD);
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default is %d)\n", MAX_ZOOM);
+				fprintf(stderr, "  -a, --all                         render all tiles in given zoom level range instead of reading from STDIN\n");
+				fprintf(stderr, "  -f, --force                       render tiles even if they seem current\n");
+				fprintf(stderr, "  -l, --max-load=LOAD               sleep if load is this high (defaults to %d)\n", MAX_LOAD_OLD);
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default is %d)\n", MAX_ZOOM);
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default is 0)\n");
+				fprintf(stderr, "\n");
 				fprintf(stderr, "If you are using --all, you can restrict the tile range by adding these options:\n");
-				fprintf(stderr, "  -x, --min-x=X        minimum X tile coordinate\n");
-				fprintf(stderr, "  -X, --max-x=X        maximum X tile coordinate\n");
-				fprintf(stderr, "  -y, --min-y=Y        minimum Y tile coordinate\n");
-				fprintf(stderr, "  -Y, --max-y=Y        maximum Y tile coordinate\n");
+				fprintf(stderr, "  -X, --max-x=X                     maximum X tile coordinate\n");
+				fprintf(stderr, "  -x, --min-x=X                     minimum X tile coordinate\n");
+				fprintf(stderr, "  -Y, --max-y=Y                     maximum Y tile coordinate\n");
+				fprintf(stderr, "  -y, --min-y=Y                     minimum Y tile coordinate\n");
+				fprintf(stderr, "\n");
+				fprintf(stderr, "  -h, --help                        display this help and exit\n");
+				fprintf(stderr, "  -V, --version                     display the version number and exit\n");
+				fprintf(stderr, "\n");
 				fprintf(stderr, "Without --all, send a list of tiles to be rendered from STDIN in the format:\n");
 				fprintf(stderr, "  X Y Z\n");
 				fprintf(stderr, "e.g.\n");
@@ -221,6 +229,10 @@ int main(int argc, char **argv)
 				fprintf(stderr, "The above would cause all 4 tiles at zoom 1 to be rendered\n");
 				return -1;
 
+			case 'V':
+				fprintf(stdout, "%s\n", VERSION);
+				exit(0);
+
 			default:
 				fprintf(stderr, "unhandled char '%c'\n", c);
 				break;
diff --git a/src/render_old.c b/src/render_old.c
index 900a5a3..de9962c 100644
--- a/src/render_old.c
+++ b/src/render_old.c
@@ -38,6 +38,7 @@
 
 #include "gen_tile.h"
 #include "protocol.h"
+#include "config.h"
 #include "render_config.h"
 #include "store_file_utils.h"
 #include "render_submit_queue.h"
@@ -202,21 +203,23 @@ int main(int argc, char **argv)
 	while (1) {
 		int option_index = 0;
 		static struct option long_options[] = {
-			{"config", required_argument, 0, 'c'},
-			{"min-zoom", required_argument, 0, 'z'},
-			{"max-zoom", required_argument, 0, 'Z'},
-			{"max-load", required_argument, 0, 'l'},
-			{"socket", required_argument, 0, 's'},
+			{"config",      required_argument, 0, 'c'},
+			{"map",         required_argument, 0, 'm'},
+			{"max-load",    required_argument, 0, 'l'},
+			{"max-zoom",    required_argument, 0, 'Z'},
+			{"min-zoom",    required_argument, 0, 'z'},
 			{"num-threads", required_argument, 0, 'n'},
-			{"tile-dir", required_argument, 0, 't'},
-			{"timestamp", required_argument, 0, 'T'},
-			{"map", required_argument, 0, 'm'},
-			{"verbose", no_argument, 0, 'v'},
-			{"help", no_argument, 0, 'h'},
+			{"socket",      required_argument, 0, 's'},
+			{"tile-dir",    required_argument, 0, 't'},
+			{"timestamp",   required_argument, 0, 'T'},
+			{"verbose",     no_argument,       0, 'v'},
+
+			{"help",        no_argument,       0, 'h'},
+			{"version",     no_argument,       0, 'V'},
 			{0, 0, 0, 0}
 		};
 
-		c = getopt_long(argc, argv, "hvz:Z:s:t:n:c:l:T:m:", long_options, &option_index);
+		c = getopt_long(argc, argv, "c:m:l:Z:z:n:s:t:T:vhV", long_options, &option_index);
 
 		if (c == -1) {
 			break;
@@ -312,17 +315,24 @@ int main(int argc, char **argv)
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: render_old [OPTION] ...\n");
 				fprintf(stderr, "Search the rendered tiles and re-render tiles which are older then the last planet import\n");
-				fprintf(stderr, "  -c, --config=CONFIG  specify the renderd config file\n");
-				fprintf(stderr, "  -n, --num-threads=N  the number of parallel request threads (default 1)\n");
-				fprintf(stderr, "  -t, --tile-dir       tile cache directory (defaults to '" HASH_PATH "')\n");
-				fprintf(stderr, "  -z, --min-zoom=ZOOM  filter input to only render tiles greater or equal to this zoom level (default 0)\n");
-				fprintf(stderr, "  -Z, --max-zoom=ZOOM  filter input to only render tiles less than or equal to this zoom level (default %d)\n", MAX_ZOOM);
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -l, --max-load=LOAD  maximum system load with which requests are submitted\n");
-				fprintf(stderr, "  -T, --timestamp=DD/MM/YY  Overwrite the assumed data of the planet import\n");
-				fprintf(stderr, "  -m, --map=STYLE      Instead of going through all styls of CONFIG, only use a specific map-style\n");
+				fprintf(stderr, "  -c, --config=CONFIG               specify the renderd config file\n");
+				fprintf(stderr, "  -l, --max-load=LOAD               maximum system load with which requests are submitted\n");
+				fprintf(stderr, "  -m, --map=STYLE                   Instead of going through all styls of CONFIG, only use a specific map-style\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "  -t, --tile-dir                    tile cache directory (defaults to '" HASH_PATH "')\n");
+				fprintf(stderr, "  -T, --timestamp=DD/MM/YY          Overwrite the assumed data of the planet import\n");
+				fprintf(stderr, "  -Z, --max-zoom=ZOOM               filter input to only render tiles less than or equal to this zoom level (default %d)\n", MAX_ZOOM);
+				fprintf(stderr, "  -z, --min-zoom=ZOOM               filter input to only render tiles greater or equal to this zoom level (default 0)\n");
+				fprintf(stderr, "\n");
+				fprintf(stderr, "  -h, --help                        display this help and exit\n");
+				fprintf(stderr, "  -V, --version                     display the version number and exit\n");
 				return -1;
 
+			case 'V':
+				fprintf(stdout, "%s\n", VERSION);
+				exit(0);
+
 			default:
 				fprintf(stderr, "unhandled char '%c'\n", c);
 				break;
diff --git a/src/render_submit_queue.c b/src/render_submit_queue.c
index 145c6a6..09f61c0 100644
--- a/src/render_submit_queue.c
+++ b/src/render_submit_queue.c
@@ -15,15 +15,19 @@
  * along with this program; If not, see http://www.gnu.org/licenses/.
  */
 
-#include <stdio.h>
-#include <unistd.h>
-#include <stddef.h>
-#include <sys/socket.h>
-#include <sys/un.h>
+#include <arpa/inet.h>
+#include <assert.h>
+#include <errno.h>
+#include <netdb.h>
 #include <pthread.h>
+#include <stddef.h>
+#include <stdio.h>
 #include <stdlib.h>
+#include <sys/socket.h>
 #include <sys/time.h>
-#include <errno.h>
+#include <sys/types.h>
+#include <sys/un.h>
+#include <unistd.h>
 
 #include "render_submit_queue.h"
 #include "sys_utils.h"
@@ -225,22 +229,124 @@ void enqueue(const char *xmlname, int x, int y, int z)
 int make_connection(const char *spath)
 {
 	int fd;
-	struct sockaddr_un addr;
 
-	fd = socket(PF_UNIX, SOCK_STREAM, 0);
+	if (spath[0] == '/') {
+		// Create a Unix socket
+		struct sockaddr_un addr;
 
-	if (fd < 0) {
-		fprintf(stderr, "failed to create unix socket\n");
-		exit(2);
-	}
+		fd = socket(PF_UNIX, SOCK_STREAM, 0);
+
+		if (fd < 0) {
+			fprintf(stderr, "failed to create unix socket\n");
+			exit(2);
+		}
+
+		bzero(&addr, sizeof(addr));
+		addr.sun_family = AF_UNIX;
+		strncpy(addr.sun_path, spath, sizeof(addr.sun_path) - 1);
+
+		if (connect(fd, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
+			close(fd);
+			return -1;
+		}
+
+	} else {
+		// Create a network socket
+		const char *d = strchr(spath, ':');
+		char *hostname;
+		u_int16_t port = RENDER_PORT;
+		char port_s[6];
+		size_t spath_len = strlen(spath);
+		size_t hostname_len = d ? d - spath : spath_len;
+
+		if (!hostname_len) {
+			hostname = strdup(RENDER_HOST);
+		} else {
+			hostname = malloc(hostname_len + sizeof('\0'));
+			assert(hostname != NULL);
+			strncpy(hostname, spath, hostname_len);
+		}
+
+		if (d) {
+			port = atoi(d + 1);
+
+			if (!port) {
+				port = RENDER_PORT;
+			}
+		}
+
+		snprintf(port_s, sizeof(port_s), "%u", port);
+
+		printf("Connecting to %s, port %u/tcp\n", hostname, port);
+
+		struct protoent *protocol = getprotobyname("tcp");
 
-	bzero(&addr, sizeof(addr));
-	addr.sun_family = AF_UNIX;
-	strncpy(addr.sun_path, spath, sizeof(addr.sun_path) - 1);
+		if (!protocol) {
+			fprintf(stderr, "cannot find TCP protocol number\n");
+			exit(2);
+		}
+
+		struct addrinfo hints;
+
+		struct addrinfo *result;
+
+		memset(&hints, 0, sizeof(hints));
+
+		hints.ai_family = AF_UNSPEC;
+
+		hints.ai_socktype = SOCK_STREAM;
+
+		hints.ai_flags = 0;
+
+		hints.ai_protocol = protocol->p_proto;
+
+		hints.ai_canonname = NULL;
+
+		hints.ai_addr = NULL;
+
+		hints.ai_next = NULL;
+
+		int ai = getaddrinfo(hostname, port_s, &hints, &result);
+
+		if (ai != 0) {
+			fprintf(stderr, "cannot resolve hostname %s\n", hostname);
+			exit(2);
+		}
+
+		struct addrinfo *rp;
+
+		for (rp = result; rp != NULL; rp = rp->ai_next) {
+			fd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
+
+			if (fd == -1) {
+				continue;
+			}
+
+			char resolved_addr[NI_MAXHOST];
+			char resolved_port[NI_MAXSERV];
+			int name_info = getnameinfo(rp->ai_addr, rp->ai_addrlen, resolved_addr, sizeof(resolved_addr), resolved_port, sizeof(resolved_port), NI_NUMERICHOST | NI_NUMERICSERV);
+
+			if (name_info != 0) {
+				fprintf(stderr, "cannot retrieve name info: %d\n", name_info);
+				exit(2);
+			}
+
+			fprintf(stderr, "Trying %s:%s\n", resolved_addr, resolved_port);
+
+			if (connect(fd, rp->ai_addr, rp->ai_addrlen) == 0) {
+				printf("Connected to %s:%s\n", resolved_addr, resolved_port);
+				break;
+			}
+
+		}
+
+		freeaddrinfo(result);
+
+		if (rp == NULL) {
+			fprintf(stderr, "cannot connect to any address for %s\n", hostname);
+			exit(2);
+		}
 
-	if (connect(fd, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
-		close(fd);
-		return -1;
 	}
 
 	return fd;
@@ -252,7 +358,7 @@ void *thread_main(void *arg)
 	int fd = make_connection(spath);
 
 	if (fd < 0) {
-		fprintf(stderr, "socket connect failed for: %s\n", spath);
+		fprintf(stderr, "connect failed for: %s\n", spath);
 		return NULL;
 	}
 
@@ -265,14 +371,14 @@ void *thread_main(void *arg)
 		}
 
 		while (process(cmd, fd) < 1) {
-			fprintf(stderr, "connection to renderd lost");
+			fprintf(stderr, "connection to renderd lost\n");
 			close(fd);
 			fd = -1;
 
 			while (fd < 0) {
-				fprintf(stderr, "sleeping for 30 seconds");
+				fprintf(stderr, "sleeping for 30 seconds\n");
 				sleep(30);
-				fprintf(stderr, "attempting to reconnect");
+				fprintf(stderr, "attempting to reconnect\n");
 				fd = make_connection(spath);
 			}
 		}
@@ -361,4 +467,3 @@ void finish_workers(void)
 	free(workers);
 	workers = NULL;
 }
-
diff --git a/src/speedtest.cpp b/src/speedtest.cpp
index b9678a3..5c8c668 100644
--- a/src/speedtest.cpp
+++ b/src/speedtest.cpp
@@ -33,6 +33,7 @@
 
 #include "gen_tile.h"
 #include "protocol.h"
+#include "config.h"
 #include "render_config.h"
 #include "render_submit_queue.h"
 
@@ -211,15 +212,17 @@ int main(int argc, char **argv)
 	while (1) {
 		int option_index = 0;
 		static struct option long_options[] = {
-			{"socket", required_argument, 0, 's'},
+			{"map",         required_argument, 0, 'm'},
 			{"num-threads", required_argument, 0, 'n'},
-			{"map", required_argument, 0, 'm'},
-			{"verbose", no_argument, 0, 'v'},
-			{"help", no_argument, 0, 'h'},
+			{"socket",      required_argument, 0, 's'},
+			{"verbose",     no_argument,       0, 'v'},
+
+			{"help",        no_argument,       0, 'h'},
+			{"version",     no_argument,       0, 'V'},
 			{0, 0, 0, 0}
 		};
 
-		c = getopt_long(argc, argv, "hvs:m:", long_options, &option_index);
+		c = getopt_long(argc, argv, "m:n:s:vhV", long_options, &option_index);
 
 		if (c == -1) {
 			break;
@@ -250,11 +253,18 @@ int main(int argc, char **argv)
 
 			case 'h':   /* -h, --help */
 				fprintf(stderr, "Usage: speedtest [OPTION] ...\n");
-				fprintf(stderr, "  -m, --map=MAP        render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
-				fprintf(stderr, "  -s, --socket=SOCKET  unix domain socket name for contacting renderd\n");
-				fprintf(stderr, "  -n, --num-threads=N the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -m, --map=MAP                     render tiles in this map (defaults to '" XMLCONFIG_DEFAULT "')\n");
+				fprintf(stderr, "  -n, --num-threads=N               the number of parallel request threads (default 1)\n");
+				fprintf(stderr, "  -s, --socket=SOCKET|HOSTNAME:PORT unix domain socket name or hostname and port for contacting renderd\n");
+				fprintf(stderr, "\n");
+				fprintf(stderr, "  -h, --help                        display this help and exit\n");
+				fprintf(stderr, "  -V, --version                     display the version number and exit\n");
 				return -1;
 
+			case 'V':
+				fprintf(stdout, "%s\n", VERSION);
+				exit(0);
+
 			default:
 				fprintf(stderr, "unhandled char '%c'\n", c);
 				break;
diff --git a/src/store_rados.c b/src/store_rados.c
index 4333682..724911c 100644
--- a/src/store_rados.c
+++ b/src/store_rados.c
@@ -352,6 +352,8 @@ struct storage_backend * init_storage_rados(const char * connection_string)
 	int i;
 
 	if (ctx == NULL) {
+		free(ctx);
+		free(store);
 		return NULL;
 	}
 
